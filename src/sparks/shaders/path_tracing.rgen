#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) readonly buffer lightsource_array {
  int lightsources[];
};
layout(binding = 10) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y)).xyz;
}

HitRecord hit_record;

void TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin, direction, tmax, 0);
  hit_record = GetHitRecord(ray_payload, origin, direction);
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);

  float RR_P = 0.9f, area_emission = 0.0f;

  int tot = lightsources[0];

  for (int b = 0; b < guo.num_bounces; b++) {
    direction = normalize(direction);
    TraceRay(origin, direction);
    if (ray_payload.t == -1.0) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    }
    Material material = materials[hit_record.hit_entity_id];
    material.albedo_color = hit_record.base_color;

    pre_gao(material, hit_record.normal, hit_record.geometry_normal, hit_record.tangent);

    vec3 hn = hit_record.normal, hp = hit_record.position, hgn = hit_record.geometry_normal;
    vec2 ht = hit_record.tex_coord;

    if (material.material_type == MATERIAL_TYPE_EMISSION) {
      radiance += throughput * material.emission * material.emission_strength;
      break;
    }

    if (material.material_type != MATERIAL_TYPE_SPECULAR && material.material_type != MATERIAL_TYPE_TRANSMISSIVE && tot != 0)
    {
      int id = int(fract(RandomFloat()) * tot) + 1;
      int id1 = lightsources[id * 2 - 1], cnt = lightsources[id * 2];
      int id2 = int(fract(RandomFloat()) * cnt);

      ObjectInfo info = object_infos[id1];
      
      Vertex p1 = GetVertex(info.vertex_offset + indices[info.index_offset + id2 * 3]),
             p2 = GetVertex(info.vertex_offset + indices[info.index_offset + id2 * 3 + 1]),
             p3 = GetVertex(info.vertex_offset + indices[info.index_offset + id2 * 3 + 2]);
      
      float h1 = fract(RandomFloat()), h2 = fract(RandomFloat()), h3;
      if (h1 + h2 > 1.0f) h1 = 1.0f - h1, h2 = 1.0f - h2;
      h3 = 1.0f - h1 - h2;
        
      vec3 hhh = h1 * p1.position + h2 * p2.position + h3 * p3.position, dir = normalize(hhh - hp);
      area_emission = length(cross(p2.position - p1.position, p3.position - p1.position)) * 0.5f * tot * cnt;
      float cosine = dot(dir, hn);
      
      TraceRay(hp, dir);
      if (!(cosine <= 0.0f || ray_payload.t < 10.0f || materials[hit_record.hit_entity_id].material_type != MATERIAL_TYPE_EMISSION))
      {
        if (dot(hit_record.normal, dir) > 0.0f) hit_record.normal *= -1.0f;
        hit_record.normal = normalize(hit_record.normal);
        float pdf1 = dot(hhh - hp, hhh - hp) / cosine / area_emission, pdf2 = pdf(direction, dir);
        if (pdf1 != 0.0f || pdf2 != 0.0f)
          radiance += throughput * materials[hit_record.hit_entity_id].emission * materials[hit_record.hit_entity_id].emission_strength *
                      bsdf(direction, dir) * pdf1 * pdf1 / (pdf1 * pdf1 + pdf2 * pdf2) *
                      (-dot(hit_record.normal, dir)) / dot(hhh - hp, hhh - hp) * area_emission;
      }
    }

    if (RandomFloat() > RR_P) break;
    throughput /= RR_P;

    if (material.material_type == MATERIAL_TYPE_SPECULAR) {
      throughput *= hit_record.base_color;
      direction -= 2.0f * dot(hn, direction) * hn;
      origin = hp;
    }
    else if (material.material_type == MATERIAL_TYPE_TRANSMISSIVE) {
      throughput *= hit_record.base_color;
      float eta = material.refraction_ratio;
      float cos_t = dot(hn, direction), sin_t = sqrt(1.0f - cos_t * cos_t);
      vec3 dx = normalize(direction - dot(direction, hn) * hn), dy = hn;
      if (cos_t < 0.0f) dy = - dy, cos_t = -cos_t;
      else eta = 1.0f / eta;
      float sin_p = sin_t / eta, cos_p, fresnel;
      if (sin_p > 1) fresnel = 1.0f;
      else
      {
        cos_p = sqrt(1.0f - sin_p * sin_p);
        fresnel = (pow(((cos_t - eta * cos_p) / (cos_t + eta * cos_p)), 2.0f) +
                  pow(((cos_p - eta * cos_t) / (cos_p + eta * cos_t)), 2.0f)) / 2.0f;
      }
      origin = hp;
      if (fract(RandomFloat()) > fresnel) direction = cos_p * dy + sin_p * dx;
      else direction = direction - dot(direction, hn) * hn * 2.0f;
    }
    else {
      vec3 dir = sample_bsdf(direction);
      if (dot(dir, hgn) <= 0.0f) break;
      TraceRay(hp, dir);
      if (dot(hit_record.normal, dir) > 0.0f) hit_record.normal *= -1.0f;
      hit_record.normal = normalize(hit_record.normal);
      float cosine = -dot(hit_record.normal, dir), pdf2 = pdf(direction, dir);
      throughput *= bsdf(direction, dir) / pdf2;
      if (cosine > 0.0f && ray_payload.t != -1.0f && materials[hit_record.hit_entity_id].material_type == MATERIAL_TYPE_EMISSION) {
        float pdf1 = ray_payload.t * ray_payload.t / cosine / area_emission;
        throughput *=  pdf2 * pdf2 / (pdf1 * pdf1 + pdf2 * pdf2);
      }
      origin = hp;
      direction = dir;
    }
  }
  return radiance;
}

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    vec4 target = screen_to_camera * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);

    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay(origin.xyz, direction.xyz), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}