#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) readonly buffer lightsource_array {
  int lightsources[];
};
layout(binding = 10) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y)).xyz;
}

HitRecord hit_record;

void TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin, direction, tmax, 0);
  hit_record = GetHitRecord(ray_payload, origin, direction);
}

int id1;
vec3 hhh;
float area_emission;

void sample_light() {
  int tot = lightsources[0];
  int id = int(fract(RandomFloat()) * tot) + 1;
  id1 = lightsources[id * 2 - 1];
  int cnt = lightsources[id * 2];
  int id2 = int(fract(RandomFloat()) * cnt);

  ObjectInfo info = object_infos[id1];
      
  Vertex p1 = GetVertex(info.vertex_offset + indices[info.index_offset + id2 * 3]),
         p2 = GetVertex(info.vertex_offset + indices[info.index_offset + id2 * 3 + 1]),
         p3 = GetVertex(info.vertex_offset + indices[info.index_offset + id2 * 3 + 2]);
      
  float h1 = fract(RandomFloat()), h2 = fract(RandomFloat()), h3;
  if (h1 + h2 > 1.0f) h1 = 1.0f - h1, h2 = 1.0f - h2;
  h3 = 1.0f - h1 - h2;
        
  hhh = h1 * p1.position + h2 * p2.position + h3 * p3.position;
  area_emission = length(cross(p2.position - p1.position, p3.position - p1.position)) * 0.5f * tot * cnt;
}

vec3 DirectLightTracing(vec3 origin, vec3 direction, int depth, bool is_inside_medium) {
  sample_light();
  vec3 dir = normalize(hhh - origin);
  vec3 throughput = vec3(1.0);
  if (is_inside_medium) {
    throughput *= pdf(direction, dir);
  }
  else {
    throughput *= bsdf(direction, dir);
  }
  float pdf2 = pdf(direction, dir);
  if (pdf2 == 0.0f) return vec3(0.0);
  vec3 hp = origin;
  float RR_P = 0.95f;
  for (int b = depth; b < guo.num_bounces; b++) {

    if (RandomFloat() > RR_P) break;
    throughput /= RR_P;

    TraceRay(hp, dir);
    if (ray_payload.t == -1.0f) {
      return vec3(0.0);
    }
    Material material = materials[hit_record.hit_entity_id];
    if (material.material_type == MATERIAL_TYPE_MEDIA) {
      if (is_inside_medium) {
        float sigma_a = material.volume_parameter.x, sigma_s = material.volume_parameter.y;
        float sigma_maj = sigma_a + sigma_s;
        throughput *= exp(-sigma_maj * ray_payload.t);
        pdf2 *= exp(-sigma_maj * ray_payload.t);
        is_inside_medium = false;
      }
      else {
        is_inside_medium = true;
      }
      hp = hit_record.position;
      continue;
    }
    else if (hit_record.hit_entity_id == id1) {
      float cosine = abs(dot(hit_record.normal, dir)), pdf1;
      if (cosine > eps) {
        pdf1 = dot(hhh - origin, hhh - origin) / cosine / area_emission;
        if (pdf1 != 0.0f || pdf2 != 0.0f)
          return throughput * material.emission * material.emission_strength *
            pdf1 / (pdf1 * pdf1 + pdf2 * pdf2);
      }
    }
    break;
  }
  return vec3(0.0);
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);

  float RR_P = 0.95f, p_march = 1.0f, pdf_cache;
  vec3 hp_cache;
  bool is_cache_empty = true, is_inside_medium = false;

  for (int b = 0; b < guo.num_bounces; b++) {
    direction = normalize(direction);
    TraceRay(origin, direction);
    if (ray_payload.t == -1.0) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    }
    if (abs(dot(hit_record.geometry_normal, direction)) < eps) break;

    Material material = materials[hit_record.hit_entity_id];
    material.albedo_color *= texture(texture_samplers[material.albedo_texture_id], hit_record.tex_coord).xyz;

    pre_gao(material, hit_record.normal, hit_record.geometry_normal, hit_record.tangent);

    int hit_entity_id = hit_record.hit_entity_id;
    vec3 hp = hit_record.position, hn = hit_record.normal, hgn = hit_record.geometry_normal, direction_old = direction;

    bool is_scatter = false;

    if (mat.material_type == MATERIAL_TYPE_EMISSION) {
      if (is_cache_empty) {
        radiance += throughput * mat.emission * mat.emission_strength;
      }
      else {
        float cosine = abs(dot(hit_record.normal, direction));
        if (cosine > eps) {
          float pdf1 = dot(hp - hp_cache, hp - hp_cache) / cosine / area_emission;
          float pdf2 = pdf_cache * p_march;
          if (pdf1 != 0.0f || pdf2 != 0.0f) {
            radiance += throughput * mat.emission * mat.emission_strength *
              pdf2 * pdf2 / (pdf1 * pdf1 + pdf2 * pdf2);
          }
        }
      }
      break;
    }

    if (RandomFloat() > RR_P) break;
    throughput /= RR_P;

    if (mat.material_type == MATERIAL_TYPE_MEDIA) {
      if (is_inside_medium) {
        float sigma_a = mat.volume_parameter.x, sigma_s = mat.volume_parameter.y;
        float sigma_maj = sigma_a + sigma_s;
        float dist = -log(max(1.0 - RandomFloat(), eps)) / sigma_maj;
        if (dist >= ray_payload.t) {
          p_march *= exp(-sigma_maj * ray_payload.t);
          origin = hp;
          is_inside_medium = false;
        }
        else {
          radiance += throughput * mat.emission * mat.emission_strength * sigma_a / sigma_maj;
          throughput *= sigma_s / sigma_maj;
          radiance += throughput * DirectLightTracing(origin + dist * direction, direction, b, is_inside_medium);
          
          vec3 dir = sample_bsdf(direction);

          is_cache_empty = false;
          hp_cache = origin + dist * direction;
          pdf_cache = pdf(direction, dir);
          p_march = 1.0f;

          origin += dist * direction;
          direction = dir;
          is_scatter = true;
        }
      }
      else {
        origin = hp;
        is_inside_medium = true;
      }
    }
    else if (RandomFloat() > mat.alpha) {
      origin = hp;
    }
    else if (mat.material_type == MATERIAL_TYPE_SPECULAR) {
      throughput *= mat.albedo_color;
      direction -= 2.0f * dot(hn, direction) * hn;
      origin = hp;
      is_cache_empty = true;
    }
    else if (mat.material_type == MATERIAL_TYPE_TRANSMISSIVE) {
      throughput *= mat.albedo_color;
      float eta = mat.eta;
      float cos_t = dot(hn, direction), sin_t = sqrt(1.0f - cos_t * cos_t);
      vec3 dx = normalize(direction - dot(direction, hn) * hn), dy = hn;
      if (cos_t < 0.0f) dy = - dy, cos_t = -cos_t;
      else eta = 1.0f / eta;
      float sin_p = sin_t / eta, cos_p, fresnel;
      if (sin_p > 1) fresnel = 1.0f;
      else
      {
        cos_p = sqrt(1.0f - sin_p * sin_p);
        fresnel = (pow(((cos_t - eta * cos_p) / (cos_t + eta * cos_p)), 2.0f) +
                  pow(((cos_p - eta * cos_t) / (cos_p + eta * cos_t)), 2.0f)) / 2.0f;
      }
      origin = hp;
      if (fract(RandomFloat()) > fresnel) direction = cos_p * dy + sin_p * dx;
      else direction = direction - dot(direction, hn) * hn * 2.0f;
      is_cache_empty = true;
    }
    else {
      radiance += throughput * DirectLightTracing(hp, direction, b, is_inside_medium); 

      vec3 dir = sample_bsdf(direction);

      is_cache_empty = false;
      hp_cache = hp;
      pdf_cache = pdf(direction, dir);
      p_march = 1.0f;

      TraceRay(hp, dir);
      float cosine = abs(dot(hit_record.normal, dir)), pdf2 = pdf(direction, dir);
      if (pdf2 <= 0.0) break;
      throughput *= bsdf(direction, dir) / pdf2;
      origin = hp;
      direction = dir;
    }

    if (abs(dot(direction, hgn)) < eps) break;
    if (dot(hgn, direction_old) * dot(hgn, direction) > 0.0 && !is_scatter)
    {
      if (inside_id == hit_entity_id) inside_id = -1;
      else inside_id = hit_entity_id;
    }
  }
  return radiance;
}

void main() {

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  vec3 total_radiance = vec3(0.0);

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(gl_LaunchIDEXT.x), uint(gl_LaunchIDEXT.y), guo.accumulated_sample + i);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(RandomFloat(), RandomFloat());
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    
    vec3 origin = vec3(camera_to_world * vec4(RandomInCircle() * guo.aperture, 0.0, 1.0));
    vec3 target = normalize(vec3(screen_to_camera * vec4(d.x, d.y, 1.0, 1.0)));
    target *= -guo.focal_length / target.z;
    target = vec3(camera_to_world * vec4(target, 1.0));
    vec3 direction = normalize(target - origin);

    inside_id = -1;
    total_radiance += clamp(SampleRay(origin, direction), 0.0, guo.clamp);
  }

  imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
             imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                 vec4(total_radiance, 1.0));
  imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
             imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + float(guo.num_samples));
}